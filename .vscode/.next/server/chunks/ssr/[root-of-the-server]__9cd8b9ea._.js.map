{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ASUS/OneDrive/Documents/urban_vertical_forming/studio-master/src/ai/genkit.ts"],"sourcesContent":["import 'dotenv/config';\nimport {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI({apiKey: process.env.GOOGLE_API_KEY})],\n  model: 'googleai/gemini-1.5-flash-latest',\n});\n"],"names":[],"mappings":";;;AAAA;AACA;AAAA;AACA;AAAA;;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;YAAC,QAAQ,QAAQ,GAAG,CAAC,cAAc;QAAA;KAAG;IACzD,OAAO;AACT","debugId":null}},
    {"offset": {"line": 240, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ASUS/OneDrive/Documents/urban_vertical_forming/studio-master/src/ai/flows/optimize-crop-yield.ts"],"sourcesContent":["// This file is machine-generated - edit at your own risk!\n\n'use server';\n\n/**\n * @fileOverview An AI agent that optimizes crop yield based on sensor data.\n *\n * - optimizeCropYield - A function that handles the crop yield optimization process.\n * - OptimizeCropYieldInput - The input type for the optimizeCropYield function.\n * - OptimizeCropYieldOutput - The return type for the optimizeCropYield function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst OptimizeCropYieldInputSchema = z.object({\n  temperature: z\n    .number()\n    .describe('The current temperature in degrees Celsius.'),\n  humidity: z.number().describe('The current humidity as a percentage.'),\n  lightLevel: z\n    .number()\n    .describe('The current light level in Lux.'),\n  cropType: z.string().describe('The type of crop being grown.'),\n});\nexport type OptimizeCropYieldInput = z.infer<typeof OptimizeCropYieldInputSchema>;\n\nconst OptimizeCropYieldOutputSchema = z.object({\n  temperatureAdjustment: z\n    .string()\n    .describe('Recommended temperature adjustment.'),\n  humidityAdjustment: z.string().describe('Recommended humidity adjustment.'),\n  lightLevelAdjustment: z\n    .string()\n    .describe('Recommended light level adjustment.'),\n  summary: z.string().describe('Summary of why these adjustments are needed'),\n});\nexport type OptimizeCropYieldOutput = z.infer<typeof OptimizeCropYieldOutputSchema>;\n\nexport async function optimizeCropYield(\n  input: OptimizeCropYieldInput\n): Promise<OptimizeCropYieldOutput> {\n  return optimizeCropYieldFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'optimizeCropYieldPrompt',\n  input: {schema: OptimizeCropYieldInputSchema},\n  output: {schema: OptimizeCropYieldOutputSchema},\n  prompt: `You are an expert agricultural consultant specializing in urban vertical farming.\n\nYou are advising a farmer on how to optimize their crop yield.\n\nBased on the following sensor data, recommend adjustments to the temperature, humidity, and light levels to optimize the yield for the specified crop.\n\nCrop Type: {{{cropType}}}\nCurrent Temperature: {{{temperature}}}Â°C\nCurrent Humidity: {{{humidity}}}%\nCurrent Light Level: {{{lightLevel}}} Lux\n\nGive a short summary of the reason you are making this recommendation.\n\nConsider the following:\n* Optimal growing conditions for the crop type.\n* Potential issues based on current conditions.\n* Actions to take to correct these issues.\n\nTemperature Adjustment: {{temperatureAdjustment}}\nHumidity Adjustment: {{humidityAdjustment}}\nLight Level Adjustment: {{lightLevelAdjustment}}\nSummary: {{summary}}`,\n});\n\nconst optimizeCropYieldFlow = ai.defineFlow(\n  {\n    name: 'optimizeCropYieldFlow',\n    inputSchema: OptimizeCropYieldInputSchema,\n    outputSchema: OptimizeCropYieldOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":"AAAA,0DAA0D;;;;;;AAI1D;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,+BAA+B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC5C,aAAa,uIAAA,CAAA,IAAC,CACX,MAAM,GACN,QAAQ,CAAC;IACZ,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,YAAY,uIAAA,CAAA,IAAC,CACV,MAAM,GACN,QAAQ,CAAC;IACZ,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAGA,MAAM,gCAAgC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC7C,uBAAuB,uIAAA,CAAA,IAAC,CACrB,MAAM,GACN,QAAQ,CAAC;IACZ,oBAAoB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACxC,sBAAsB,uIAAA,CAAA,IAAC,CACpB,MAAM,GACN,QAAQ,CAAC;IACZ,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC/B;AAGO,eAAe,kBACpB,KAA6B;IAE7B,OAAO,sBAAsB;AAC/B;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAA4B;IAC5C,QAAQ;QAAC,QAAQ;IAA6B;IAC9C,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;oBAqBS,CAAC;AACrB;AAEA,MAAM,wBAAwB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACzC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA3CoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 325, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ASUS/OneDrive/Documents/urban_vertical_forming/studio-master/src/ai/flows/recommend-crop-flow.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview An AI agent that recommends crops and a suitable vertical farming method based on location.\n *\n * - recommendCrop - A function that handles the crop recommendation process.\n * - RecommendCropInput - The input type for the recommendCrop function.\n * - RecommendCropOutput - The return type for the recommendCrop function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst RecommendCropInputSchema = z.object({\n  city: z.string().describe('The city where the farm is located.'),\n  state: z.string().describe('The state where the farm is located.'),\n  excludeCrops: z.array(z.string()).optional().describe('A list of crop names to exclude from the recommendation.'),\n  forceCropName: z.string().optional().describe('If provided, generate a recommendation for this specific crop instead of finding a new one.')\n});\nexport type RecommendCropInput = z.infer<typeof RecommendCropInputSchema>;\n\nconst RecommendCropOutputSchema = z.object({\n  cropName: z.string().describe('The name of the recommended crop.'),\n  reason: z.string().describe('A detailed explanation for the recommendation.'),\n  predictedFarmType: z.string().describe('The most suitable vertical farming method (e.g., \"Hydroponics\", \"Aeroponics\") for the location.'),\n});\nexport type RecommendCropOutput = z.infer<typeof RecommendCropOutputSchema>;\n\nexport async function recommendCrop(\n  input: RecommendCropInput\n): Promise<RecommendCropOutput> {\n  return recommendCropFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'recommendCropPrompt',\n  input: {schema: RecommendCropInputSchema},\n  output: {schema: RecommendCropOutputSchema},\n  prompt: `You are an agricultural expert and creative consultant for vertical farming startups in India.\n\n{{#if forceCropName}}\nYour goal is to provide a detailed justification for growing '{{{forceCropName}}}' in the specified location, along with the most suitable vertical farming method.\nFor the output, set 'cropName' to '{{{forceCropName}}}'.\nProvide a new 'reason' and 'predictedFarmType' based on the analysis for '{{{forceCropName}}}'.\n{{else}}\nYour goal is to provide unique and profitable crop recommendations tailored to a specific location. Avoid common choices like spinach or lettuce unless they are exceptionally well-suited for the given location.\n\n{{#if excludeCrops}}\nPlease do not recommend any of the following crops: {{#each excludeCrops}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}. Find a suitable alternative.\n{{/if}}\n\nBased on the location provided, recommend a single, highly suitable crop to grow and the most appropriate vertical farming method (e.g., Hydroponics, Aeroponics, Aquaponics).\n{{/if}}\n\nYour recommendation must be based on a detailed analysis of:\n1.  **Local Climate**: The general climate of the region.\n2.  **Market Demand**: What crops have high local market value or are popular in local cuisine?\n3.  **Resource Availability**: Consider factors like water and electricity that might favor one farming technique over another.\n4.  **Profitability**: Suggest a crop that could be profitable for a small-scale urban farm.\n\nLocation: {{{city}}}, {{{state}}}, India\n\nProvide a clear, concise reason for your crop recommendation that explicitly references the factors above.\nThe output 'predictedFarmType' field should contain the name of the single recommended farming method.`,\n});\n\nconst recommendCropFlow = ai.defineFlow(\n  {\n    name: 'recommendCropFlow',\n    inputSchema: RecommendCropInputSchema,\n    outputSchema: RecommendCropOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,2BAA2B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxC,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,cAAc,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ,GAAG,QAAQ,CAAC;IACtD,eAAe,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AAChD;AAGA,MAAM,4BAA4B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACzC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC5B,mBAAmB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACzC;AAGO,eAAe,cACpB,KAAyB;IAEzB,OAAO,kBAAkB;AAC3B;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAwB;IACxC,QAAQ;QAAC,QAAQ;IAAyB;IAC1C,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;sGAyB2F,CAAC;AACvG;AAEA,MAAM,oBAAoB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACrC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA/CoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 412, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ASUS/OneDrive/Documents/urban_vertical_forming/studio-master/src/ai/flows/get-city-climate-flow.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview An AI agent that provides climate data for a given city.\n *\n * - getCityClimate - A function that gets climate data.\n * - GetCityClimateInput - The input type for the getCityClimate function.\n * - GetCityClimateOutput - The return type for the getCityClimate function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst GetCityClimateInputSchema = z.object({\n  city: z.string().describe('The city in India.'),\n  state: z.string().describe('The state in India.'),\n});\nexport type GetCityClimateInput = z.infer<typeof GetCityClimateInputSchema>;\n\nconst GetCityClimateOutputSchema = z.object({\n  averageTemp: z.number().describe('The typical average temperature in Celsius.'),\n  averageHumidity: z.number().describe('The typical average humidity as a percentage.'),\n  climateDescription: z.string().describe('A brief, one-sentence description of the city\\'s climate (e.g., \"Hot and humid tropical climate.\").'),\n});\nexport type GetCityClimateOutput = z.infer<typeof GetCityClimateOutputSchema>;\n\nexport async function getCityClimate(\n  input: GetCityClimateInput\n): Promise<GetCityClimateOutput> {\n  return getCityClimateFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'getCityClimatePrompt',\n  input: {schema: GetCityClimateInputSchema},\n  output: {schema: GetCityClimateOutputSchema},\n  prompt: `You are a climatologist. For the given city and state in India, provide the typical average annual temperature in Celsius, the typical average annual humidity percentage, and a one-sentence description of the climate.\n\nCity: {{{city}}}\nState: {{{state}}}\n\nReturn only the structured data.`,\n});\n\nconst getCityClimateFlow = ai.defineFlow(\n  {\n    name: 'getCityClimateFlow',\n    inputSchema: GetCityClimateInputSchema,\n    outputSchema: GetCityClimateOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,4BAA4B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACzC,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC7B;AAGA,MAAM,6BAA6B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1C,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACrC,oBAAoB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC1C;AAGO,eAAe,eACpB,KAA0B;IAE1B,OAAO,mBAAmB;AAC5B;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAyB;IACzC,QAAQ;QAAC,QAAQ;IAA0B;IAC3C,QAAQ,CAAC;;;;;gCAKqB,CAAC;AACjC;AAEA,MAAM,qBAAqB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACtC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA3BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 477, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ASUS/OneDrive/Documents/urban_vertical_forming/studio-master/src/ai/flows/generate-alerts-flow.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview An AI agent that generates realistic system alerts for a vertical farm.\n *\n * - generateAlerts - A function that generates a list of alerts.\n * - GenerateAlertsInput - The input type for the generateAlerts function.\n * - GenerateAlertsOutput - The return type for the generateAlerts function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst AlertSchema = z.object({\n  id: z.string().describe('A short, unique identifier for the alert (e.g., \"alert-001\").'),\n  severity: z.enum(['Critical', 'Warning', 'Info']).describe('The severity of the alert.'),\n  type: z.enum(['Temperature', 'Moisture', 'Nutrients', 'Light', 'Hardware', 'Power']).describe('The category of the alert.'),\n  component: z.string().describe('The farm component that the alert originates from (e.g., \"Tray 2\", \"Rack 1 - Pump\", \"Zone B Sensor\").'),\n  message: z.string().describe('A concise, descriptive message about the alert.'),\n  timestamp: z.string().describe('A relative timestamp for when the alert occurred (e.g., \"5m ago\", \"2h ago\").'),\n  status: z.enum(['Active', 'Resolved']).describe('The current status of the alert.'),\n  suggestion: z.string().describe('A brief, actionable suggestion on how to resolve the alert.'),\n});\n\nconst GenerateAlertsInputSchema = z.object({\n  city: z.string().describe('The city where the farm is located.'),\n  state: z.string().describe('The state where the farm is located.'),\n  cropName: z.string().describe('The primary crop being grown.'),\n  farmType: z.string().describe('The type of vertical farm (e.g., \"Hydroponics\").'),\n});\nexport type GenerateAlertsInput = z.infer<typeof GenerateAlertsInputSchema>;\n\nconst GenerateAlertsOutputSchema = z.object({\n  alerts: z.array(AlertSchema).describe('A list of 5 to 10 generated alerts.'),\n});\nexport type GenerateAlertsOutput = z.infer<typeof GenerateAlertsOutputSchema>;\n\nexport async function generateAlerts(\n  input: GenerateAlertsInput\n): Promise<GenerateAlertsOutput> {\n  return generateAlertsFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'generateAlertsPrompt',\n  input: {schema: GenerateAlertsInputSchema},\n  output: {schema: GenerateAlertsOutputSchema},\n  prompt: `You are a vertical farm monitoring system. Based on the provided farm context, generate a list of 5 to 10 realistic system alerts.\n\nFarm Location: '{{{city}}}, {{{state}}}'\nPrimary Crop: '{{{cropName}}}'\nFarm Type: '{{{farmType}}}'\n\nInstructions:\n1.  Generate a unique ID for each alert.\n2.  Assign a 'type' from the available categories.\n3.  Assign a 'severity' ('Critical', 'Warning', 'Info'). Critical alerts are for immediate, system-threatening issues.\n4.  Write a clear, concise 'message'.\n5.  Provide a realistic 'component' name where the alert originates.\n6.  Set a recent, relative 'timestamp'.\n7.  Provide a helpful, actionable 'suggestion' for resolving the alert.\n8.  Make most alerts 'Active', but include one or two 'Resolved' alerts for realism.\n\nExample Alerts:\n- Temperature: \"High temperature detected in Tray 2: 38Â°C\"\n- Moisture: \"Soil moisture low in Rack 1 â Water pump not triggered.\"\n- Nutrients: \"Nutrient tank nearing empty â 10% remaining.\"\n- Light: \"LED lights not functioning in Tower 4\"\n- Hardware: \"Humidity sensor failure in Zone B\"\n- Power: \"Backup battery at 20% â Please charge.\"\n\nReturn only the structured JSON data.`,\n});\n\nconst generateAlertsFlow = ai.defineFlow(\n  {\n    name: 'generateAlertsFlow',\n    inputSchema: GenerateAlertsInputSchema,\n    outputSchema: GenerateAlertsOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n\n    "],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3B,IAAI,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACxB,UAAU,uIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAY;QAAW;KAAO,EAAE,QAAQ,CAAC;IAC3D,MAAM,uIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAe;QAAY;QAAa;QAAS;QAAY;KAAQ,EAAE,QAAQ,CAAC;IAC9F,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC/B,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC7B,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC/B,QAAQ,uIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAU;KAAW,EAAE,QAAQ,CAAC;IAChD,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAClC;AAEA,MAAM,4BAA4B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACzC,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAGA,MAAM,6BAA6B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1C,QAAQ,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,aAAa,QAAQ,CAAC;AACxC;AAGO,eAAe,eACpB,KAA0B;IAE1B,OAAO,mBAAmB;AAC5B;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAyB;IACzC,QAAQ;QAAC,QAAQ;IAA0B;IAC3C,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;qCAwB0B,CAAC;AACtC;AAEA,MAAM,qBAAqB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACtC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA9CoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 585, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ASUS/OneDrive/Documents/urban_vertical_forming/studio-master/src/ai/flows/recommend-fertilizer-flow.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview An AI agent that recommends fertilizer based on soil and crop data.\n *\n * - recommendFertilizer - A function that handles the fertilizer recommendation process.\n * - RecommendFertilizerInput - The input type for the recommendFertilizer function.\n * - RecommendFertilizerOutput - The return type for the recommendFertilizer function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst RecommendFertilizerInputSchema = z.object({\n  temperature: z.number().describe('The current temperature in degrees Celsius.'),\n  humidity: z.number().describe('The current humidity as a percentage.'),\n  moisture: z.number().describe('The current soil moisture content as a percentage.'),\n  soilType: z.string().describe('The type of soil (e.g., \"Sandy\", \"Loamy\", \"Clayey\", \"Red\", \"Black\").'),\n  cropType: z.string().describe('The type of crop being grown (e.g., \"Rice\", \"Maize\", \"Cotton\").'),\n  nitrogen: z.number().describe('The amount of Nitrogen in the soil (kg/ha).'),\n  phosphorous: z.number().describe('The amount of Phosphorous in the soil (kg/ha).'),\n  potassium: z.number().describe('The amount of Potassium in the soil (kg/ha).'),\n});\nexport type RecommendFertilizerInput = z.infer<typeof RecommendFertilizerInputSchema>;\n\nconst RecommendFertilizerOutputSchema = z.object({\n  fertilizerName: z.string().describe('The name of the recommended fertilizer (e.g., \"Urea\", \"DAP\", \"10-26-26\").'),\n  reasoning: z.string().describe('A detailed, one-paragraph explanation for why this fertilizer is recommended based on the inputs.'),\n});\nexport type RecommendFertilizerOutput = z.infer<typeof RecommendFertilizerOutputSchema>;\n\nexport async function recommendFertilizer(\n  input: RecommendFertilizerInput\n): Promise<RecommendFertilizerOutput> {\n  return recommendFertilizerFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'recommendFertilizerPrompt',\n  input: {schema: RecommendFertilizerInputSchema},\n  output: {schema: RecommendFertilizerOutputSchema},\n  prompt: `You are an expert agricultural scientist specializing in soil health and crop nutrition in India.\n\nBased on the provided environmental and soil data, recommend the most suitable fertilizer.\n\nContext:\n- Crop Type: {{{cropType}}}\n- Soil Type: {{{soilType}}}\n- Temperature: {{{temperature}}}Â°C\n- Humidity: {{{humidity}}}%\n- Soil Moisture: {{{moisture}}}%\n- Nitrogen (N): {{{nitrogen}}} kg/ha\n- Phosphorous (P): {{{phosphorous}}} kg/ha\n- Potassium (K): {{{potassium}}} kg/ha\n\nYour task is to:\n1.  Analyze the provided data to determine nutrient deficiencies or imbalances for the specified crop.\n2.  Recommend a single, appropriate fertilizer by name (e.g., \"Urea\", \"DAP\", \"14-35-14\", \"28-28-0\").\n3.  Provide a clear, one-paragraph reasoning for your recommendation, explaining how the fertilizer addresses the specific needs of the crop in the given conditions.\n\nReturn only the structured JSON data.`,\n});\n\nconst recommendFertilizerFlow = ai.defineFlow(\n  {\n    name: 'recommendFertilizerFlow',\n    inputSchema: RecommendFertilizerInputSchema,\n    outputSchema: RecommendFertilizerOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,iCAAiC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9C,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACjC;AAGA,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACpC,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACjC;AAGO,eAAe,oBACpB,KAA+B;IAE/B,OAAO,wBAAwB;AACjC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAA8B;IAC9C,QAAQ;QAAC,QAAQ;IAA+B;IAChD,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;qCAmB0B,CAAC;AACtC;AAEA,MAAM,0BAA0B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC3C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IAzCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 669, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ASUS/OneDrive/Documents/urban_vertical_forming/studio-master/src/lib/schemas.ts"],"sourcesContent":["\nimport { z } from \"zod\";\n\nexport const LoginSchema = z.object({\n  email: z.string().email({ message: \"Please enter a valid email.\" }),\n  password: z.string().min(1, { message: \"Password is required.\" }),\n});\n\nexport const RegisterSchema = z.object({\n  name: z.string().min(2, { message: \"Name must be at least 2 characters.\" }),\n  email: z.string().email({ message: \"Please enter a valid email.\" }),\n  password: z.string().min(6, { message: \"Password must be at least 6 characters.\" }),\n  confirmPassword: z.string(),\n}).refine(data => data.password === data.confirmPassword, {\n  message: \"Passwords do not match.\",\n  path: [\"confirmPassword\"],\n});\n\nexport const AddressSchema = z.object({\n    addressLine1: z.string().min(1, { message: \"Address is required.\" }),\n    city: z.string().min(1, { message: \"City is required.\" }),\n    state: z.string().min(1, { message: \"Please select a state.\" }),\n    pincode: z.string().length(6, { message: \"Pincode must be 6 digits.\" }),\n    experience: z.string().min(1, { message: \"Please select your experience level.\" }),\n    farmType: z.string().min(1, { message: \"Please select your farm type.\" }),\n});\n\nexport const AiOptimizerSchema = z.object({\n  cropType: z.string().min(1, { message: \"Crop type is required.\" }),\n  temperature: z.coerce.number().min(-50).max(100, \"Invalid temperature\"),\n  humidity: z.coerce.number().min(0).max(100, \"Invalid humidity\"),\n  lightLevel: z.coerce.number().min(0, \"Invalid light level\"),\n});\n\nexport const CropRecommendationSchema = z.object({\n    city: z.string(),\n    state: z.string(),\n    excludeCrops: z.array(z.string()).optional(),\n    forceCropName: z.string().optional(),\n});\n\nexport const CityClimateSchema = z.object({\n    city: z.string(),\n    state: z.string(),\n});\n\nexport const GenerateAlertsInputSchema = z.object({\n  city: z.string(),\n  state: z.string(),\n  cropName: z.string(),\n  farmType: z.string(),\n});\n\nexport const FertilizerRecommenderSchema = z.object({\n    temperature: z.coerce.number().min(-50).max(100, \"Invalid temperature\"),\n    humidity: z.coerce.number().min(0).max(100, \"Invalid humidity\"),\n    moisture: z.coerce.number().min(0).max(100, \"Invalid moisture\"),\n    soilType: z.string().min(1, \"Please select a soil type\"),\n    cropType: z.string().min(1, \"Crop type is required\"),\n    nitrogen: z.coerce.number().min(0),\n    phosphorous: z.coerce.number().min(0),\n    potassium: z.coerce.number().min(0),\n});\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 766, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ASUS/OneDrive/Documents/urban_vertical_forming/studio-master/src/lib/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { optimizeCropYield, type OptimizeCropYieldOutput } from '@/ai/flows/optimize-crop-yield';\nimport { recommendCrop, type RecommendCropOutput } from '@/ai/flows/recommend-crop-flow';\nimport { getCityClimate as getCityClimateFlow, type GetCityClimateOutput } from '@/ai/flows/get-city-climate-flow';\nimport { generateAlerts as generateAlertsFlow, type GenerateAlertsOutput } from '@/ai/flows/generate-alerts-flow';\nimport { recommendFertilizer, type RecommendFertilizerOutput } from '@/ai/flows/recommend-fertilizer-flow';\nimport { AiOptimizerSchema, CropRecommendationSchema, CityClimateSchema, GenerateAlertsInputSchema, FertilizerRecommenderSchema } from './schemas';\n\nexport async function getAiOptimization(\n    formData: unknown\n): Promise<{ data?: OptimizeCropYieldOutput; error?: string }> {\n  const validatedFields = AiOptimizerSchema.safeParse(formData);\n\n  if (!validatedFields.success) {\n    console.log(validatedFields.error.flatten().fieldErrors);\n    return { error: 'Invalid input.' };\n  }\n\n  try {\n    const result = await optimizeCropYield(validatedFields.data);\n    return { data: result };\n  } catch (e) {\n    console.error(e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { error: `Failed to get optimization suggestions: ${errorMessage}` };\n  }\n}\n\nexport async function getRecommendedCrop(\n    locationData: unknown\n): Promise<{ data?: RecommendCropOutput; error?: string }> {\n    const validatedFields = CropRecommendationSchema.safeParse(locationData);\n\n    if (!validatedFields.success) {\n        console.log(validatedFields.error.flatten().fieldErrors);\n        return { error: 'Invalid location data.' };\n    }\n\n    try {\n        const result = await recommendCrop(validatedFields.data);\n        return { data: result };\n    } catch (e) {\n        console.error(e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { error: `Failed to get crop recommendation: ${errorMessage}` };\n    }\n}\n\nexport async function getCityClimate(\n    locationData: unknown\n): Promise<{ data?: GetCityClimateOutput; error?: string }> {\n    const validatedFields = CityClimateSchema.safeParse(locationData);\n\n    if (!validatedFields.success) {\n        console.log(validatedFields.error.flatten().fieldErrors);\n        return { error: 'Invalid location data.' };\n    }\n\n    try {\n        const result = await getCityClimateFlow(validatedFields.data);\n        return { data: result };\n    } catch (e) {\n        console.error(e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { error: `Failed to get city climate: ${errorMessage}` };\n    }\n}\n\nexport async function getGeneratedAlerts(\n    inputData: unknown\n): Promise<{ data?: GenerateAlertsOutput; error?: string }> {\n    const validatedFields = GenerateAlertsInputSchema.safeParse(inputData);\n\n    if (!validatedFields.success) {\n        console.log(validatedFields.error.flatten().fieldErrors);\n        return { error: 'Invalid input data.' };\n    }\n\n    try {\n        const result = await generateAlertsFlow(validatedFields.data);\n        return { data: result };\n    } catch (e) {\n        console.error(e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { error: `Failed to generate alerts: ${errorMessage}` };\n    }\n}\n\nexport async function getFertilizerRecommendation(\n    formData: unknown\n): Promise<{ data?: RecommendFertilizerOutput; error?: string }> {\n    const validatedFields = FertilizerRecommenderSchema.safeParse(formData);\n\n    if (!validatedFields.success) {\n        console.log(validatedFields.error.flatten().fieldErrors);\n        return { error: 'Invalid input.' };\n    }\n\n    try {\n        const result = await recommendFertilizer(validatedFields.data);\n        return { data: result };\n    } catch (e) {\n        console.error(e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { error: `Failed to get fertilizer recommendation: ${errorMessage}` };\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 914, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ASUS/OneDrive/Documents/urban_vertical_forming/studio-master/.next-internal/server/app/dashboard/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getCityClimate as '40c2ce8d5605fa636cc18618ebb2741b304a18a2cc'} from 'ACTIONS_MODULE0'\nexport {getRecommendedCrop as '403cdc21338501a545f0074fb003419de41ce6fc86'} from 'ACTIONS_MODULE0'\nexport {getAiOptimization as '40413d03885022ab6bc1f4a0dd45331a3c0c88b235'} from 'ACTIONS_MODULE0'\nexport {getFertilizerRecommendation as '407008b5beadce1a57d95f2d1d4990ba1687b0de04'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 981, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ASUS/OneDrive/Documents/urban_vertical_forming/studio-master/src/app/dashboard/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA8R,GAC3T,4DACA","debugId":null}},
    {"offset": {"line": 995, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ASUS/OneDrive/Documents/urban_vertical_forming/studio-master/src/app/dashboard/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0Q,GACvS,wCACA","debugId":null}},
    {"offset": {"line": 1009, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}